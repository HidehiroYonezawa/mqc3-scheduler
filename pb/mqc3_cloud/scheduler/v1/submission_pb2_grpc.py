# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from mqc3_cloud.scheduler.v1 import submission_pb2 as mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2


class SubmissionServiceStub(object):
    """SubmissionService provides RPCs for managing job submissions.
    [Backends] BOTH (HARDWARE AND SIMULATOR)
    [Behavior Differences]
    - Unless otherwise noted, behavior is identical for HARDWARE and SIMULATOR.
    - Backend-specific semantics are carried by JobExecutionSettings.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitJob = channel.unary_unary(
                '/mqc3_cloud.scheduler.v1.SubmissionService/SubmitJob',
                request_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.SubmitJobRequest.SerializeToString,
                response_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.SubmitJobResponse.FromString,
                )
        self.CancelJob = channel.unary_unary(
                '/mqc3_cloud.scheduler.v1.SubmissionService/CancelJob',
                request_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.CancelJobRequest.SerializeToString,
                response_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.CancelJobResponse.FromString,
                )
        self.GetJobStatus = channel.unary_unary(
                '/mqc3_cloud.scheduler.v1.SubmissionService/GetJobStatus',
                request_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetJobStatusRequest.SerializeToString,
                response_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetJobStatusResponse.FromString,
                )
        self.GetJobResult = channel.unary_unary(
                '/mqc3_cloud.scheduler.v1.SubmissionService/GetJobResult',
                request_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetJobResultRequest.SerializeToString,
                response_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetJobResultResponse.FromString,
                )
        self.GetServiceStatus = channel.unary_unary(
                '/mqc3_cloud.scheduler.v1.SubmissionService/GetServiceStatus',
                request_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetServiceStatusRequest.SerializeToString,
                response_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetServiceStatusResponse.FromString,
                )


class SubmissionServiceServicer(object):
    """SubmissionService provides RPCs for managing job submissions.
    [Backends] BOTH (HARDWARE AND SIMULATOR)
    [Behavior Differences]
    - Unless otherwise noted, behavior is identical for HARDWARE and SIMULATOR.
    - Backend-specific semantics are carried by JobExecutionSettings.
    """

    def SubmitJob(self, request, context):
        """Submits a job for execution on a backend.
        [Behavior Differences]
        - NONE at RPC surface. Backend-specific validation occurs on Job.settings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelJob(self, request, context):
        """Cancels a previously submitted job if it has not yet completed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobStatus(self, request, context):
        """Retrieves the current execution status of a submitted job (e.g., "RUNNING", "COMPLETED", "FAILED").
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobResult(self, request, context):
        """Retrieves the result of a completed job.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceStatus(self, request, context):
        """Retrieves the operational status of the submission service itself (e.g., available, under maintenance).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubmissionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitJob': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitJob,
                    request_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.SubmitJobRequest.FromString,
                    response_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.SubmitJobResponse.SerializeToString,
            ),
            'CancelJob': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelJob,
                    request_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.CancelJobRequest.FromString,
                    response_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.CancelJobResponse.SerializeToString,
            ),
            'GetJobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJobStatus,
                    request_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetJobStatusRequest.FromString,
                    response_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetJobStatusResponse.SerializeToString,
            ),
            'GetJobResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJobResult,
                    request_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetJobResultRequest.FromString,
                    response_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetJobResultResponse.SerializeToString,
            ),
            'GetServiceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceStatus,
                    request_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetServiceStatusRequest.FromString,
                    response_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetServiceStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mqc3_cloud.scheduler.v1.SubmissionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SubmissionService(object):
    """SubmissionService provides RPCs for managing job submissions.
    [Backends] BOTH (HARDWARE AND SIMULATOR)
    [Behavior Differences]
    - Unless otherwise noted, behavior is identical for HARDWARE and SIMULATOR.
    - Backend-specific semantics are carried by JobExecutionSettings.
    """

    @staticmethod
    def SubmitJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mqc3_cloud.scheduler.v1.SubmissionService/SubmitJob',
            mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.SubmitJobRequest.SerializeToString,
            mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.SubmitJobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mqc3_cloud.scheduler.v1.SubmissionService/CancelJob',
            mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.CancelJobRequest.SerializeToString,
            mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.CancelJobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetJobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mqc3_cloud.scheduler.v1.SubmissionService/GetJobStatus',
            mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetJobStatusRequest.SerializeToString,
            mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetJobStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetJobResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mqc3_cloud.scheduler.v1.SubmissionService/GetJobResult',
            mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetJobResultRequest.SerializeToString,
            mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetJobResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServiceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mqc3_cloud.scheduler.v1.SubmissionService/GetServiceStatus',
            mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetServiceStatusRequest.SerializeToString,
            mqc3__cloud_dot_scheduler_dot_v1_dot_submission__pb2.GetServiceStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
