# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from mqc3_cloud.scheduler.v1 import execution_pb2 as mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2


class ExecutionServiceStub(object):
    """ExecutionService defines the interface for a quantum computer to interact with
    the scheduling system. It enables job assignment, result reporting, and
    upload URL management. Intended for use by physical_lab (quantum computer controller).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AssignNextJob = channel.unary_unary(
                '/mqc3_cloud.scheduler.v1.ExecutionService/AssignNextJob',
                request_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.AssignNextJobRequest.SerializeToString,
                response_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.AssignNextJobResponse.FromString,
                )
        self.ReportExecutionResult = channel.unary_unary(
                '/mqc3_cloud.scheduler.v1.ExecutionService/ReportExecutionResult',
                request_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.ReportExecutionResultRequest.SerializeToString,
                response_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.ReportExecutionResultResponse.FromString,
                )
        self.RefreshUploadUrl = channel.unary_unary(
                '/mqc3_cloud.scheduler.v1.ExecutionService/RefreshUploadUrl',
                request_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.RefreshUploadUrlRequest.SerializeToString,
                response_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.RefreshUploadUrlResponse.FromString,
                )


class ExecutionServiceServicer(object):
    """ExecutionService defines the interface for a quantum computer to interact with
    the scheduling system. It enables job assignment, result reporting, and
    upload URL management. Intended for use by physical_lab (quantum computer controller).
    """

    def AssignNextJob(self, request, context):
        """Assigns the next available job in the execution queue to the requesting backend.

        This RPC ensures that the assigned job is exclusively reserved for the requesting
        controller and will not be assigned to any other backend. If no job is currently
        queued, the response will contain an empty job_id.

        Use this method to periodically check for assignable jobs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportExecutionResult(self, request, context):
        """Reports the final execution result and metadata of a previously assigned job.
        Includes timestamps, backend identification, and uploaded result receipt/metrics.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshUploadUrl(self, request, context):
        """Requests a new upload URL for a previously assigned job.
        This is typically used when the original URL has expired.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecutionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AssignNextJob': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignNextJob,
                    request_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.AssignNextJobRequest.FromString,
                    response_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.AssignNextJobResponse.SerializeToString,
            ),
            'ReportExecutionResult': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportExecutionResult,
                    request_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.ReportExecutionResultRequest.FromString,
                    response_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.ReportExecutionResultResponse.SerializeToString,
            ),
            'RefreshUploadUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshUploadUrl,
                    request_deserializer=mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.RefreshUploadUrlRequest.FromString,
                    response_serializer=mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.RefreshUploadUrlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mqc3_cloud.scheduler.v1.ExecutionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecutionService(object):
    """ExecutionService defines the interface for a quantum computer to interact with
    the scheduling system. It enables job assignment, result reporting, and
    upload URL management. Intended for use by physical_lab (quantum computer controller).
    """

    @staticmethod
    def AssignNextJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mqc3_cloud.scheduler.v1.ExecutionService/AssignNextJob',
            mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.AssignNextJobRequest.SerializeToString,
            mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.AssignNextJobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportExecutionResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mqc3_cloud.scheduler.v1.ExecutionService/ReportExecutionResult',
            mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.ReportExecutionResultRequest.SerializeToString,
            mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.ReportExecutionResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefreshUploadUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mqc3_cloud.scheduler.v1.ExecutionService/RefreshUploadUrl',
            mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.RefreshUploadUrlRequest.SerializeToString,
            mqc3__cloud_dot_scheduler_dot_v1_dot_execution__pb2.RefreshUploadUrlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
